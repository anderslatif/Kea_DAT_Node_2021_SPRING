mysql: table
mongodb: collection
[
    {
        key: 123        
    },
    {
        key: "now as a string",
        anotherKey: "785"
    },
    {}    
]

mysql
-----
great for data that needs to adhere to a rigid schema, structured data
great for when the business requirements are not prone to change
enforces checks of data type etc. and fails on the db level
can give quite a head-ache when trying to split up / shard / scale

mongodb
-------
flexible -> rapid prototyping
great for Javascript (read Node) applications cause you can save JS objects / json directly to mongodb and read it as such. 
it's amazing for sharding / clustering
beware that it puts a lot of pressure on the developer being good, a lot of things need to happen in the application layer
it's easy to use but easier to really mess up your data in a big way


can you combine them? yes! with polyglot persistence
mysql - for all the business data
mongodb - for all the logs

